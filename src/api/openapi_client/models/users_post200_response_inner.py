# coding: utf-8

"""
    Stack Overflow Object Detection API

    API that fetches the top 10 users from the Stack Overflow Users API, reads their profile images, and uses an open-source object detection model to detect specified objects in those images.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.users_post200_response_inner_bounding_boxes_inner import UsersPost200ResponseInnerBoundingBoxesInner
from typing import Optional, Set
from typing_extensions import Self

class UsersPost200ResponseInner(BaseModel):
    """
    UsersPost200ResponseInner
    """ # noqa: E501
    user_id: Optional[StrictInt] = Field(default=None, description="The ID of the user")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the user")
    profile_image: Optional[StrictStr] = Field(default=None, description="The URL of the user's profile image")
    object_detected: Optional[StrictBool] = Field(default=None, description="Whether the specified object was detected in the profile image")
    bounding_boxes: Optional[List[UsersPost200ResponseInnerBoundingBoxesInner]] = None
    detection_time_ms: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The time in milliseconds it took to detect the object")
    __properties: ClassVar[List[str]] = ["user_id", "display_name", "profile_image", "object_detected", "bounding_boxes", "detection_time_ms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsersPost200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bounding_boxes (list)
        _items = []
        if self.bounding_boxes:
            for _item in self.bounding_boxes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bounding_boxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsersPost200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "display_name": obj.get("display_name"),
            "profile_image": obj.get("profile_image"),
            "object_detected": obj.get("object_detected"),
            "bounding_boxes": [UsersPost200ResponseInnerBoundingBoxesInner.from_dict(_item) for _item in obj["bounding_boxes"]] if obj.get("bounding_boxes") is not None else None,
            "detection_time_ms": obj.get("detection_time_ms")
        })
        return _obj


